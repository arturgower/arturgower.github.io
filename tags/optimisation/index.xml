<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>optimisation | Artur L Gower</title>
    <link>https://arturgower.github.io/tags/optimisation/</link>
      <atom:link href="https://arturgower.github.io/tags/optimisation/index.xml" rel="self" type="application/rss+xml" />
    <description>optimisation</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-gb</language><copyright>Â© 2022 Artur L Gower</copyright><lastBuildDate>Mon, 26 Feb 2018 21:47:27 +0000</lastBuildDate>
    <image>
      <url>https://arturgower.github.io/img/icon-192.png</url>
      <title>optimisation</title>
      <link>https://arturgower.github.io/tags/optimisation/</link>
    </image>
    
    <item>
      <title>Entropy GO</title>
      <link>https://arturgower.github.io/project/entropy_go/</link>
      <pubDate>Mon, 26 Feb 2018 21:47:27 +0000</pubDate>
      <guid>https://arturgower.github.io/project/entropy_go/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Detecting faults on a wing</title>
      <link>https://arturgower.github.io/post/wing-faults/</link>
      <pubDate>Sat, 13 Jan 2018 20:57:07 +0000</pubDate>
      <guid>https://arturgower.github.io/post/wing-faults/</guid>
      <description>&lt;p&gt;Below is the outline of a wing with a bolt and two plates (&lt;span style=&#34;color: green;&#34;&gt;green&lt;/span&gt;) that were not fitted together correctly (may require zooming in). The method we devised takes an imprecise measurement of this wing (&lt;span style=&#34;color: blue;&#34;&gt;blue&lt;/span&gt;) and returns an approximation of the wing (&lt;span style=&#34;color: red;&#34;&gt;red&lt;/span&gt;), see Figure 1. The method also identifies the location and type of features (i.e. the bolt and misaligned plates).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Reconstructed fault 1&#34; src=&#34;https://arturgower.github.io/img/ReconstructedReal.png&#34;/&gt;
 












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/ReconstructedReal2.png&#34; &gt;
&lt;img src=&#34;https://arturgower.github.io/img/ReconstructedReal2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The figures bellow (The spiky light blue image) illustrates how the method decomposes the measured data into a feature basis, much like a frequency decomposition. For more details click on &lt;a href=&#34;https://arturgower.github.io/pdf/ArturAirbusReport.pdf&#34;&gt;this report &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;float: right;&#34; alt=&#34;Fault frequency decomposition&#34; src=&#34;https://arturgower.github.io/img/CoefficientsWithErrors.png&#34;/&gt;
&lt;img style=&#34;float: right;&#34; alt=&#34;Reconstructed fault 3&#34; src=&#34;https://arturgower.github.io/img/ReconstructedReal3.png&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tracking train tracks</title>
      <link>https://arturgower.github.io/post/train/</link>
      <pubDate>Sat, 13 Jan 2018 20:40:02 +0000</pubDate>
      <guid>https://arturgower.github.io/post/train/</guid>
      <description>&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/gifs/train.gif&#34; data-caption=&#34;Estimated track in red compared with the camera image in blue. As the train shakes, so does the camera.&#34;&gt;
&lt;img src=&#34;https://arturgower.github.io/img/gifs/train.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Estimated track in red compared with the camera image in blue. As the train shakes, so does the camera.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;!-- width=&#34;220&#34; --&gt;
  &lt;!-- &lt;img style=&#34;width: 400px; float: right;&#34; alt=&#34;Track reconstruction&#34; src=&#34;train.gif&#34; hspace=&#34;2&#34; /&gt; --&gt;
&lt;p&gt;
    To increase the number of trains running on each track we have to be able to accurately locate every train, at each moment. GPS can be unreliable because of the multitude of tunnels, so we looked at using a camera mounted on top of the train pointed down at the tracks. From the image of this camera an on-board computer can locate the train&amp;rsquo;s location.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
    At least that is the theory. One major difficulty is that the train shakes unpredictably, which the camera sees as the track moving and changing shape unpredictably. To eliminate these errors we formulated an optimisation method for each frame. This method attempts to separate the errors due to shaking from the tracks real curvature. On the right is the result of the method taking what &lt;span style=&#34;color: blue;&#34;&gt;the camera sees&lt;/span&gt;, the blue tracks, and returning the &lt;span style=&#34;color: red;&#34;&gt;real position of the tracks&lt;/span&gt;, in red.  

&lt;/p&gt;

&lt;p&gt;The figures below show how well our method &lt;span style=&#34;color: black;&#34;&gt;recovers&lt;/span&gt; the track curvature compared with the  &lt;span style=&#34;color: green;&#34;&gt;real curvature&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;
 &lt;img src=&#34;https://arturgower.github.io/img/alpha_error.png&#34;&gt;
 












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/beta_error.png&#34; data-caption=&#34;Above we see the estimated planar curvature $\alpha$ and vertical curvature $\beta$, both in black, compared to the real curvatures $\alpha^* $ and $\beta^* $ in green.&#34;&gt;
&lt;img src=&#34;https://arturgower.github.io/img/beta_error.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Above we see the estimated planar curvature $\alpha$ and vertical curvature $\beta$, both in black, compared to the real curvatures $\alpha^* $ and $\beta^* $ in green.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;!--
On the right we see the estimated planar curvature &amp;alpha; and vertical curvature &amp;beta;, both in black, compared to the &lt;span style=&#34;color: green;&#34;&gt; real curvatures&lt;/span&gt; in green.
--&gt;

  &lt;!-- &lt;img style=&#34;width: 350px;  float: right;&#34; alt=&#34;Curvature errors&#34; src=&#34;Pictures/alpha_error.jpg&#34; hspace=&#34;2&#34; /&gt;
    &lt;img style=&#34;width: 350px;  float: right;&#34; alt=&#34;Curvature errors&#34; src=&#34;Pictures/beta_error.jpg&#34; hspace=&#34;2&#34; /&gt; --&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The art of cable arranging</title>
      <link>https://arturgower.github.io/post/cable-arranging/</link>
      <pubDate>Sat, 13 Jan 2018 20:25:45 +0000</pubDate>
      <guid>https://arturgower.github.io/post/cable-arranging/</guid>
      <description>

&lt;h2 id=&#34;how-to-design-a-collection-of-cables-to-be-both-robust-and-flexible&#34;&gt;How to design a collection of cables to be both robust and flexible?&lt;/h2&gt;

&lt;p&gt;A subsea control umbilical is a collection of electrical, fibre optic cables, and fluid conduits bound together.  In offshore oil and gas field developments, umbilicals are critical so they need to be robust and flexible.&lt;/p&gt;

&lt;p&gt;There is not limit to the number of possible designs that the cables can occupy, so it is not possible to just check them all. Instead, we need to allow, mathematically, these cables to be
placed any where as long as they do not overlap or break any other given restriction. Naturally this leads us to formulate the problem as an optimisation problem with continuous variables.&lt;/p&gt;

&lt;!-- 












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/cables/OptimalCables2Are=Ste=4Stif1.png&#34; &gt;
&lt;img src=&#34;https://arturgower.github.io/img/cables/OptimalCables2Are=Ste=4Stif1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
 --&gt;

&lt;p&gt;&lt;img style=&#34;width: 350px; float: right;&#34; alt=&#34;&#34; src=&#34;https://arturgower.github.io/img/cables/OptimalCables2Are=Ste=4Stif1.png&#34;/&gt;
&lt;img style=&#34;width: 350px; float: right;&#34; alt=&#34;&#34; src=&#34;https://arturgower.github.io/img/cables/OptimalCables2Are=Ste=4Stif4.png&#34;/&gt;&lt;/p&gt;

&lt;!-- #### Figure 1: --&gt;

&lt;p&gt;The light green cables are heavy steel cables, darker green are quad cables and the small purple one are fibre optical.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;width: 350px; float: right;&#34; alt=&#34;&#34; src=&#34;https://arturgower.github.io/img/cables/OptimalCables2Are=Ste=4Stif3.png&#34;/&gt;
&lt;img style=&#34;width: 350px; float: right;&#34; alt=&#34;&#34; src=&#34;https://arturgower.github.io/img/cables/OptimalCables2Are=Ste=4Stif2.png&#34;/&gt;&lt;/p&gt;

&lt;!-- #### Figure 2: --&gt;

&lt;p&gt;On the left we see a design which penalised steel cables touching (as it leads to greater wear and tear).
&lt;!--
\includegraphics[width=0.42\textwidth]{OptimalCables2Are=Ste=4Stif1}
\includegraphics[width=0.42\textwidth]{OptimalCables2Are=Ste=4Stif4}\\
$\mathbf{(1)}$ One layer and cost: 11.9 $C_{area}^{-1}$ \hspace{.2cm} $\mathbf{(2)}$ Two layer and cost: 12.9 $C_{area}^{-1}$
\includegraphics[width=0.42\textwidth]{OptimalCables2Are=Ste=4Stif3}
\includegraphics[width=0.42\textwidth]{OptimalCables2Are=Ste=4Stif2} \\
$\mathbf{(3)}$ Two layer and cost: 13.1 $C_{area}^{-1}$ \hspace{.2cm} $\mathbf{(4)}$ Two layer and cost: 13.1 $C_{area}^{-1}$
} --&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elimination of errors from track line detection, In: Train Positioning Using Video Odometry</title>
      <link>https://arturgower.github.io/publication/train/</link>
      <pubDate>Sun, 13 Apr 2014 20:40:02 +0000</pubDate>
      <guid>https://arturgower.github.io/publication/train/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/gifs/train.gif&#34; data-caption=&#34;Estimated track in red compared with the camera image in blue. As the train shakes, so does the camera.&#34;&gt;
&lt;img src=&#34;https://arturgower.github.io/img/gifs/train.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Estimated track in red compared with the camera image in blue. As the train shakes, so does the camera.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;!-- width=&#34;220&#34; --&gt;
  &lt;!-- &lt;img style=&#34;width: 400px; float: right;&#34; alt=&#34;Track reconstruction&#34; src=&#34;train.gif&#34; hspace=&#34;2&#34; /&gt; --&gt;
&lt;p&gt;
    To increase the number of trains running on each track we have to be able to accurately locate every train, at each moment. GPS can be unreliable because of the multitude of tunnels, so we looked at using a camera mounted on top of the train pointed down at the tracks. From the image of this camera an on-board computer can locate the train&amp;rsquo;s location.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
    At least that is the theory. One major difficulty is that the train shakes unpredictably, which the camera sees as the track moving and changing shape unpredictably. To eliminate these errors we formulated an optimisation method for each frame. This method attempts to separate the errors due to shaking from the tracks real curvature. On the right is the result of the method taking what &lt;span style=&#34;color: blue;&#34;&gt;the camera sees&lt;/span&gt;, the blue tracks, and returning the &lt;span style=&#34;color: red;&#34;&gt;real position of the tracks&lt;/span&gt;, in red.  

&lt;/p&gt;

&lt;p&gt;The figures below show how well our method &lt;span style=&#34;color: black;&#34;&gt;recovers&lt;/span&gt; the track curvature compared with the  &lt;span style=&#34;color: green;&#34;&gt;real curvature&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;
 &lt;img src=&#34;https://arturgower.github.io/img/alpha_error.png&#34;&gt;
 












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/beta_error.png&#34; data-caption=&#34;Above we see the estimated planar curvature $\alpha$ and vertical curvature $\beta$, both in black, compared to the real curvatures $\alpha^* $ and $\beta^* $ in green.&#34;&gt;
&lt;img src=&#34;https://arturgower.github.io/img/beta_error.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Above we see the estimated planar curvature $\alpha$ and vertical curvature $\beta$, both in black, compared to the real curvatures $\alpha^* $ and $\beta^* $ in green.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;!--
On the right we see the estimated planar curvature &amp;alpha; and vertical curvature &amp;beta;, both in black, compared to the &lt;span style=&#34;color: green;&#34;&gt; real curvatures&lt;/span&gt; in green.
--&gt;

  &lt;!-- &lt;img style=&#34;width: 350px;  float: right;&#34; alt=&#34;Curvature errors&#34; src=&#34;Pictures/alpha_error.jpg&#34; hspace=&#34;2&#34; /&gt;
    &lt;img style=&#34;width: 350px;  float: right;&#34; alt=&#34;Curvature errors&#34; src=&#34;Pictures/beta_error.jpg&#34; hspace=&#34;2&#34; /&gt; --&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Detecting Geometric Faults from Measured Data</title>
      <link>https://arturgower.github.io/publication/geometric-faults/</link>
      <pubDate>Fri, 27 Apr 2012 12:14:41 +0000</pubDate>
      <guid>https://arturgower.github.io/publication/geometric-faults/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Below is the outline of a wing with a bolt and two plates (&lt;span style=&#34;color: green;&#34;&gt;green&lt;/span&gt;) that were not fitted together correctly (may require zooming in). The method we devised takes an imprecise measurement of this wing (&lt;span style=&#34;color: blue;&#34;&gt;blue&lt;/span&gt;) and returns an approximation of the wing (&lt;span style=&#34;color: red;&#34;&gt;red&lt;/span&gt;), see Figure 1. The method also identifies the location and type of features (i.e. the bolt and misaligned plates).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Reconstructed fault 1&#34; src=&#34;https://arturgower.github.io/img/ReconstructedReal.png&#34;/&gt;
 












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/ReconstructedReal2.png&#34; &gt;
&lt;img src=&#34;https://arturgower.github.io/img/ReconstructedReal2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The figures bellow (The spiky light blue image) illustrates how the method decomposes the measured data into a feature basis, much like a frequency decomposition. For more details click on &lt;a href=&#34;https://arturgower.github.io/pdf/ArturAirbusReport.pdf&#34;&gt;this report &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;float: right;&#34; alt=&#34;Fault frequency decomposition&#34; src=&#34;https://arturgower.github.io/img/CoefficientsWithErrors.png&#34;/&gt;
&lt;img style=&#34;float: right;&#34; alt=&#34;Reconstructed fault 3&#34; src=&#34;https://arturgower.github.io/img/ReconstructedReal3.png&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Industrial Mathematics</title>
      <link>https://arturgower.github.io/project/industry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://arturgower.github.io/project/industry/</guid>
      <description>

&lt;!-- &lt;style&gt;
img {
    float: right;
}
&lt;/style&gt; --&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;The projects below come from commercial and industrial challenges.&lt;/p&gt;

&lt;figure class=&#34;alignright&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/pics/train_tracks.jpg&#34; &gt;
&lt;img src=&#34;https://arturgower.github.io/img/pics/train_tracks.jpg&#34; alt=&#34;&#34; width=&#34;60%&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;h4 id=&#34;tracking-train-tracks-publication-train&#34;&gt;&lt;a href=&#34;https://arturgower.github.io/publication/train&#34;&gt;Tracking train tracks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;How to track a train using only a camera? We designed a method that extracts the curvature of the tracks and removes errors caused by the train jiggling.&lt;/p&gt;

&lt;figure class=&#34;alignright&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/gifs/train.gif&#34; data-caption=&#34;The blue is captured from a camera on-board a train. To eliminate the shaking, we formulated an optimization method that recovers the real position of the tracks, in red.&#34;&gt;
&lt;img src=&#34;https://arturgower.github.io/img/gifs/train.gif&#34; alt=&#34;&#34; width=&#34;50%&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The blue is captured from a camera on-board a train. To eliminate the shaking, we formulated an optimization method that recovers the real position of the tracks, in red.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&#34;alignright&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/pics/umbilical.jpg&#34; &gt;
&lt;img src=&#34;https://arturgower.github.io/img/pics/umbilical.jpg&#34; alt=&#34;&#34; width=&#34;40%&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
  

&lt;h4 id=&#34;designing-a-collection-of-cables-publication-umbilical&#34;&gt;&lt;a href=&#34;https://arturgower.github.io/publication/umbilical&#34;&gt;Designing a collection of cables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;How to design a collection of cables to be both robust and flexible? The answer is to use continuous optimisation.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&#34;alignright&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://arturgower.github.io/img/pics/wing.jpg&#34; &gt;
&lt;img src=&#34;https://arturgower.github.io/img/pics/wing.jpg&#34; alt=&#34;&#34; width=&#34;40%&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;h4 id=&#34;detecting-small-geometric-faults-on-a-wing-publication-geometric-faults&#34;&gt;&lt;a href=&#34;https://arturgower.github.io/publication/geometric-faults&#34;&gt;Detecting small geometric faults on a wing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;How to detect faults smaller than the measurement error? We used concepts from compact sensing and optimisation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
